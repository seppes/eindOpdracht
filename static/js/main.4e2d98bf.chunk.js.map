{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Kamers","props","kamer","className","soort","aantalPersonen","prijs","Landen","landen","land","aantalHotelsBeschikbaar","StyleH1","styled","h1","StyleNav","div","StyleFooter","StyleNavLink","a","StyleList","KAMER_DETAILS","LANDEN","App","useState","inputValue","setInputValue","id","href","map","k","key","l","onClick","alert","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"szCAIA,SAASA,EAAOC,GAAQ,IACbC,EAASD,EAATC,MACP,OAAO,yBAAKC,UAAU,eAClB,6BAAMD,EAAME,OACZ,6BAAMF,EAAMG,gBACZ,6BAAMH,EAAMI,MAAZ,WAIR,SAASC,EAAON,GAAQ,IACbO,EAAUP,EAAVO,OACP,OAAO,yBAAKL,UAAU,eAClB,6BAAMK,EAAOC,MACb,6BAAMD,EAAOE,0BAIrB,IAAMC,EAAUC,IAAOC,GAAV,KAMPC,EAAWF,IAAOG,IAAV,KAeRC,EAAcJ,IAAOG,IAAV,KAcXE,EAAeL,IAAOM,EAAV,KAQZC,EAAYP,IAAOG,IAAV,KAQTK,EAAgB,CAClB,CAAChB,MAAO,oBAAqBC,eAAgB,EAAGC,MAAO,IACvD,CAACF,MAAO,qBAAsBC,eAAgB,EAAGC,MAAO,IACxD,CAACF,MAAO,qBAAsBC,eAAgB,EAAGC,MAAO,KACxD,CAACF,MAAO,qBAAsBC,eAAgB,EAAGC,MAAO,KACxD,CAACF,MAAO,qBAAsBC,eAAgB,GAAIC,MAAO,MAGvDe,EAAS,CACX,CAACZ,KAAM,SAAUC,wBAAyB,GAC1C,CAACD,KAAM,YAAaC,wBAAyB,GAC7C,CAACD,KAAM,YAAaC,wBAAyB,IA4BlCY,MAzBf,WAAgB,IAAD,EACyBC,mBAAS,kCADlC,mBACJC,EADI,KACQC,EADR,KAEX,OACI,yBAAKC,GAAG,QACJ,kBAACZ,EAAD,KAAU,kBAACG,EAAD,CAAcU,KAAK,KAAnB,gBAEV,kBAACR,EAAD,KACI,kBAACR,EAAD,cACCS,EAAcQ,KAAI,SAACC,GAAD,OACf,kBAAC7B,EAAD,CAAQ8B,IAAKD,EAAEzB,MAAOF,MAAO2B,QAErC,kBAACV,EAAD,KACI,kBAACR,EAAD,eACCU,EAAOO,KAAI,SAACG,GAAD,OACR,kBAACxB,EAAD,CAAQuB,IAAKC,EAAEtB,KAAMD,OAAQuB,QAErC,4BAAQC,QAAS,kBAAMC,MAAM,qBAA7B,SACA,2CACA,2BAAOC,MAAOV,EAAYW,SAAU,SAACC,GAAD,OAAOX,EAAcW,EAAEC,OAAOH,UAClE,kDAAwBV,GACxB,kBAACR,EAAD,KAAa,4DC9FLsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4e2d98bf.chunk.js","sourcesContent":["import './App.css';\r\nimport styled from \"@emotion/styled\";\r\nimport React, {useState} from 'react';\r\n\r\nfunction Kamers(props) {\r\n    const {kamer} = props;\r\n    return <div className=\"productLine\">\r\n        <div>{kamer.soort}</div>\r\n        <div>{kamer.aantalPersonen}</div>\r\n        <div>{kamer.prijs}&euro;</div>\r\n    </div>;\r\n}\r\n\r\nfunction Landen(props) {\r\n    const {landen} = props;\r\n    return <div className=\"productLine\">\r\n        <div>{landen.land}</div>\r\n        <div>{landen.aantalHotelsBeschikbaar}</div>\r\n    </div>;\r\n}\r\n\r\nconst StyleH1 = styled.h1`\r\n    border-bottom: black;\r\n    font-weight: lighter;\r\n    padding-top: 80px;\r\n`;\r\n\r\nconst StyleNav = styled.div`\r\n  height: 60px;\r\n  padding-top: 30px;\r\n  background-color: cadetblue;\r\n  color: white;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  text-align: center;\r\n  padding-left: 30px;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyleFooter = styled.div`\r\n  text-align: center;\r\n  background-color: lightblue;\r\n  color: white;\r\n  left: 0;\r\n  bottom: 0;\r\n  height: 50px;\r\n  width: 100%;\r\n  margin-block-start: 0;\r\n  margin-block-end: 0;\r\n  position:fixed ;\r\n  margin-top: 50px;\r\n`;\r\n\r\nconst StyleNavLink = styled.a`\r\n  color: white;\r\n  font-size: larger;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyleList = styled.div`\r\npadding-bottom: 60px;\r\n& div {\r\n       display: -webkit-box;\r\n       padding-right: 20px;\r\n  }\r\n`;\r\n\r\nconst KAMER_DETAILS = [\r\n    {soort: \"eenpersoons kamer\", aantalPersonen: 1, prijs: 50},\r\n    {soort: \"tweepersoons kamer\", aantalPersonen: 2, prijs: 80},\r\n    {soort: \"vierpersoons kamer\", aantalPersonen: 4, prijs: 150},\r\n    {soort: \"vijfpersoons kamer\", aantalPersonen: 5, prijs: 200},\r\n    {soort: \"tienpersoons kamer\", aantalPersonen: 10, prijs: 300}\r\n];\r\n\r\nconst LANDEN = [\r\n    {land: \"Belgie\", aantalHotelsBeschikbaar: 6},\r\n    {land: \"Nederland\", aantalHotelsBeschikbaar: 3},\r\n    {land: \"Frankrijk\", aantalHotelsBeschikbaar: 4},\r\n];\r\n\r\nfunction App() {\r\n    const [inputValue, setInputValue] = useState(\"zoekfunctie die nog niet af is\");\r\n    return (\r\n        <div id=\"root\">\r\n            <StyleNav><StyleNavLink href=\"/\">ez bookings</StyleNavLink></StyleNav>\r\n\r\n            <StyleList>\r\n                <StyleH1>Hotel</StyleH1>\r\n                {KAMER_DETAILS.map((k) =>\r\n                    <Kamers key={k.soort} kamer={k}/>)}\r\n            </StyleList>\r\n            <StyleList>\r\n                <StyleH1>Landen</StyleH1>\r\n                {LANDEN.map((l) =>\r\n                    <Landen key={l.land} landen={l}/>)}\r\n            </StyleList>\r\n            <button onClick={() => alert('hallo test test')}>click</button>\r\n            <h2>input field</h2>\r\n            <input value={inputValue} onChange={(e) => setInputValue(e.target.value)}/>\r\n            <p>u zocht het hotel : {inputValue}</p>\r\n            <StyleFooter><p>ez bookings copyright 2020</p></StyleFooter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}